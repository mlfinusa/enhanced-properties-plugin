/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
    id 'maven-publish'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation(group:'org.spockframework', name:'spock-core', version:'1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }

}

gradlePlugin {
    // Define the plugin
    plugins() {
        enhancedProperties {
            id = 'dev.mattfoster.enhanced-properties'
            implementationClass = 'dev.mattfoster.gradle.plugins.enhancedproperties.EnhancedPropertiesPlugin'
            version = 'test-SNAPSHOT'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
group 'dev.mattfoster.gradle'
version = 'test-SNAPSHOT'

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files(sourceSets.main.runtimeClasspath)
            .withPropertyName("runtimeClasspath")
            .withNormalizer(ClasspathNormalizer)
    outputs.dir(outputDir)
            .withPropertyName("outputDir")

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

publishing {
    publications {
        EnhancedProperties(MavenPublication) {
            from components.java

        }
    }
    repositories {
        maven {
            name = "BuildFolderRepository"
            url = "$buildDir/repos/testing"
        }
    }
}

task publishToBuildDirectoryMavenRepo(dependsOn: [publishEnhancedPropertiesPublicationToBuildFolderRepositoryRepository]){

}


// Add a task to run the functional tests
task functionalTest(type: Test, dependsOn: [publishEnhancedPropertiesPublicationToBuildFolderRepositoryRepository]) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}


check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
